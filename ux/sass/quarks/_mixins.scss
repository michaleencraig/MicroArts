// FUNCTIONS
//---------------------------------------------
@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

// intrinsic ratio percent
@function percent($width, $height){
	$percent: ( $height / $width )*100 + "%";
	@return #{$percent};
}

// HELPER MIXINS
//---------------------------------------------
@mixin chevron($cDirection:"right", $cSize: 20px, $cWidth: 1px, $cColor: black) {
	content: '';
	display: inline-block;
	width: $cSize;
	height: $cSize;
	border-top: 1px solid $cColor;
	border-right: 1px solid $cColor;
	border-width: $cWidth;

	@if $cDirection == 'up'     { transform: rotate(-45deg); }
	@if $cDirection == 'right'  { transform: rotate(45deg); }
	@if $cDirection == 'down' 	{ transform: rotate(135deg); }
	@if $cDirection == 'left'   { transform: rotate(225deg); }
}
@mixin clearfix {
	*zoom:1;

	&:before,
	&:after {
		content:"";
		display:table;
	}
	&:after {
		clear:both;
	}
}
@mixin linear-gradient($top-color, $bottom-color, $start-pos:0%, $stop-pos:100%) {
	background: $bottom-color;
	/*background: -webkit-gradient(linear, left top, left bottom, from($top-color), to($bottom-color));
	background: -webkit-linear-gradient(top, $top-color $start-pos , $bottom-color $stop-pos);
	background: -moz-linear-gradient(top, $top-color $start-pos, $bottom-color $stop-pos);
	background: -ms-linear-gradient(top, $top-color $start-pos, $bottom-color $stop-pos);
	background: -o-linear-gradient(top, $top-color $start-pos, $bottom-color $stop-pos);
	background: linear-gradient(top, $top-color $start-pos, $bottom-color $stop-pos);
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$top-color}', EndColorStr='#{$bottom-color}');*/

	background: -moz-linear-gradient(top, $top-color $start-pos, $bottom-color $stop-pos);
	background: -webkit-gradient(linear, left bottom, right top, color-stop(0%,$top-color), color-stop($stop-pos,$bottom-color));
	background: -webkit-linear-gradient(top, $top-color $start-pos,$bottom-color $stop-pos);
	background: -o-linear-gradient(top, $top-color $start-pos,$bottom-color $stop-pos);
	background: -ms-linear-gradient(top, $top-color $start-pos,$bottom-color $stop-pos);
	background: linear-gradient(top, $top-color $start-pos,$bottom-color $stop-pos);
	filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,StartColorStr='#{$top-color}', EndColorStr='#{$bottom-color}');
}
@mixin rem($property, $values) {
	$font-size: 16px;
	$px-values: ();
	$rem-values: ();

	@each $value in $values {
		@if $value == 0 or $value == auto {
			$px-values: join($px-values, $value);
			$rem-values: join($rem-values, $value);
		} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			$new-rem-value: $value / $font-size;
			$px-values: join($px-values, round($value));
			$rem-values: join($rem-values, #{$new-rem-value}rem);
		} @else {
			$px-values: join($px-values, round($value * $font-size));
			$rem-values: join($rem-values, #{$value}rem);
		}
	}
	#{$property}: $px-values;
	#{$property}: $rem-values;
}
@mixin transition($transition) {
	-webkit-transition: $transition;
	-moz-transition: $transition;
	-ms-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
}

@mixin fade-before($fade-position, $fade: true) {
    @if ($fade) {
        position: relative;
        opacity: 0;
        top: $fade-position;
        @include transition($transition-speed all);
    } @else {
    }
}

@mixin fade-down($fade: true, $down: true) {
    @if ($fade and $down) {
        position: relative;
        opacity: 1;
        top: 0;
        @include transition($transition-speed all);
    }
}

@mixin center($horizontal: true, $vertical: true) {
    position: fixed;
    @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);
    } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
    }
}

@mixin uppercase() {
    text-transform: uppercase;
}  